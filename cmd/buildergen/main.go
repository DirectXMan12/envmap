package main

import (
	"log"
	"flag"
	"strings"
	"os"
	"fmt"
	"path/filepath"

	"github.com/directxman12/envmap/pkg/loader"
	"github.com/directxman12/envmap/pkg/traverse"
	"github.com/directxman12/envmap/cmd/buildergen/generators"
)

var genFuncs = []generators.Generator{
	generators.GenDoc,
	generators.GenWrappers,
	generators.GenRender,
}

func main() {
	flag.Parse()
	args := flag.Args()
	if len(args) != 1 {
		log.Fatalf("must specify a single source file")
	}
	fileDir, fileName := filepath.Split(args[0])

	l, errs := loader.FromArgs(flag.Args())
	if len(errs) > 0 {
		for _, err := range errs {
			log.Printf("error loading files: %v", err)
		}
		log.Fatalf("unable to load files")
	}

	files := l.Files()
	if len(files) < 1 {
		log.Fatalf("no files were parsed as Go")
	}

	trav := traverse.File(files[0])

	var genBlocks []string
	// TODO: sort?
	allImports := make(map[string]generators.ImportSpec)
	for _, gen := range genFuncs {
		blocks, imports := gen(trav)
		genBlocks = append(genBlocks, blocks...)
		for _, importSpec := range imports {
			allImports[importSpec.Path] = importSpec
		}
	}

	outName := fmt.Sprintf("%s.buildergen.go", fileName[:len(fileName)-3])
	outPath := filepath.Join(fileDir, outName)
	out, err := os.Create(outPath)
	if err != nil {
		log.Fatalf("error writing output: %v", err)
	}
	defer out.Close()
	if len(genBlocks) > 0 {
		fmt.Fprintf(out, "package %s\n\n", trav.PackageName())
		if len(allImports) > 0 {
			fmt.Fprintf(out, "import (\n")
			for _, importSpec := range allImports {
				fmt.Fprintf(out, "\t%q\n", importSpec.Path)
			}
			fmt.Fprintf(out, ")\n\n")
		}
		fmt.Fprintf(out, "// this file is autogenerated.\n// run `go generate` to update it.\n")
		fmt.Fprintf(out, strings.Join(genBlocks, "\n\n"))
	}
}


