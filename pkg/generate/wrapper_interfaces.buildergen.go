package generate

import (
	"go/ast"
)

// this file is autogenerated.
// run `go generate` to update it.

type Declaration interface {
	RenderDecl() ast.Decl
}
func RawDeclaration(o ast.Decl) declaration {
	return declaration{o}
}

func (w declaration) RenderDecl() ast.Decl {
	return w.Decl
}


type Import interface {
	RenderImportSpec() ast.ImportSpec
}

func (w RawImport) RenderImportSpec() ast.ImportSpec {
	return ast.ImportSpec(w)
}


type TypeDefinition interface {
	RenderExpr() ast.Expr
}
func RawTypeDefinition(o ast.Expr) typeDefinition {
	return typeDefinition{o}
}

func (w typeDefinition) RenderExpr() ast.Expr {
	return w.Expr
}


type TypeDeclaration interface {
	RenderTypeSpec() *ast.TypeSpec
}

func (w *RawTypeDeclaration) RenderTypeSpec() *ast.TypeSpec {
	res := ast.TypeSpec(*w)
	return &res
}


type FieldGroup interface {
	RenderField() *ast.Field
}

func (w *RawFieldGroup) RenderField() *ast.Field {
	res := ast.Field(*w)
	return &res
}


type FunctionDeclaration interface {
	RenderDecl() ast.Decl
	RenderFuncDecl() *ast.FuncDecl
}

func (w *RawFunctionDeclaration) RenderDecl() ast.Decl {
	res := ast.FuncDecl(*w)
	return &res
}
func (w *RawFunctionDeclaration) RenderFuncDecl() *ast.FuncDecl {
	res := ast.FuncDecl(*w)
	return &res
}


type BlockStatement interface {
	RenderStmt() ast.Stmt
	RenderBlockStmt() *ast.BlockStmt
}

func (w *RawBlockStatement) RenderStmt() ast.Stmt {
	res := ast.BlockStmt(*w)
	return &res
}
func (w *RawBlockStatement) RenderBlockStmt() *ast.BlockStmt {
	res := ast.BlockStmt(*w)
	return &res
}


type FunctionDefinition interface {
	RenderExpr() ast.Expr
	RenderFuncType() *ast.FuncType
}

func (w *RawFunctionDefinition) RenderExpr() ast.Expr {
	res := ast.FuncType(*w)
	return &res
}
func (w *RawFunctionDefinition) RenderFuncType() *ast.FuncType {
	res := ast.FuncType(*w)
	return &res
}


type ValueDeclaration interface {
	RenderValueSpec() *ast.ValueSpec
}

func (w *RawValueDeclaration) RenderValueSpec() *ast.ValueSpec {
	res := ast.ValueSpec(*w)
	return &res
}


type Expr interface {
	RenderStmt() ast.Stmt
	RenderExpr() ast.Expr
}
func RawExpr(o ast.Expr) expr {
	return expr{o}
}

func (w expr) RenderExpr() ast.Expr {
	return w.Expr
}


type Statement interface {
	RenderStmt() ast.Stmt
}
func RawStatement(o ast.Stmt) statement {
	return statement{o}
}

func (w statement) RenderStmt() ast.Stmt {
	return w.Stmt
}


type CallExpr interface {
	RenderExpr() ast.Expr
	RenderStmt() ast.Stmt
	RenderCallExpr() *ast.CallExpr
}

func (w *RawCallExpr) RenderExpr() ast.Expr {
	res := ast.CallExpr(*w)
	return &res
}
func (w *RawCallExpr) RenderCallExpr() *ast.CallExpr {
	res := ast.CallExpr(*w)
	return &res
}


type CaseClause interface {
	RenderCaseClause() *ast.CaseClause
}

func (w *RawCaseClause) RenderCaseClause() *ast.CaseClause {
	res := ast.CaseClause(*w)
	return &res
}


type SelectClause interface {
	RenderCommClause() *ast.CommClause
}

func (w *RawSelectClause) RenderCommClause() *ast.CommClause {
	res := ast.CommClause(*w)
	return &res
}