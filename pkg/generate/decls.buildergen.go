package generate

import (
	"go/ast"
)

// this file is autogenerated.
// run `go generate` to update it.

// WithDoc attaches documentation to this TypesDeclaration.
func (b *TypesDeclarationBuilder) WithDoc(lines ...string) *TypesDeclarationBuilder {
	if len(lines) > 0 {
		b.decl.Doc = createDocComment(lines)
	}
	return b
}


// WithDoc attaches documentation to this TypeDeclaration.
func (b *TypeDeclarationBuilder) WithDoc(lines ...string) *TypeDeclarationBuilder {
	if len(lines) > 0 {
		b.spec.Doc = createDocComment(lines)
	}
	return b
}


// WithDoc attaches documentation to this FunctionDeclaration.
func (b *FunctionDeclarationBuilder) WithDoc(lines ...string) *FunctionDeclarationBuilder {
	if len(lines) > 0 {
		b.decl.Doc = createDocComment(lines)
	}
	return b
}


// WithDoc attaches documentation to this ValuesDeclaration.
func (b *ValuesDeclarationBuilder) WithDoc(lines ...string) *ValuesDeclarationBuilder {
	if len(lines) > 0 {
		b.decl.Doc = createDocComment(lines)
	}
	return b
}


// WithDoc attaches documentation to this ValueDeclaration.
func (b *ValueDeclarationBuilder) WithDoc(lines ...string) *ValueDeclarationBuilder {
	if len(lines) > 0 {
		b.spec.Doc = createDocComment(lines)
	}
	return b
}


// WithDoc attaches documentation to this VarDeclaration.
func (b *VarDeclarationBuilder) WithDoc(lines ...string) *VarDeclarationBuilder {
	if len(lines) > 0 {
		b.spec.Doc = createDocComment(lines)
	}
	return b
}


// WithDoc attaches documentation to this ConstDeclaration.
func (b *ConstDeclarationBuilder) WithDoc(lines ...string) *ConstDeclarationBuilder {
	if len(lines) > 0 {
		b.spec.Doc = createDocComment(lines)
	}
	return b
}


func (b *TypesDeclarationBuilder) RenderDecl() ast.Decl {
	return b.decl
}


func (b *TypeDeclarationBuilder) RenderTypeSpec() *ast.TypeSpec {
	return b.spec
}


func (b *FunctionDeclarationBuilder) RenderFuncDecl() *ast.FuncDecl {
	return b.decl
}


func (b *FunctionDeclarationBuilder) RenderDecl() ast.Decl {
	return b.decl
}


func (b *ValuesDeclarationBuilder) RenderDecl() ast.Decl {
	return b.decl
}


func (b *ValueDeclarationBuilder) RenderValueSpec() *ast.ValueSpec {
	return b.spec
}